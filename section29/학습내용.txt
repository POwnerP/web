1. 해시
해시: 데이터를 변환하는 것을 의미한다.
- 비밀번호 데이터를 받는 경우 원상태로 저장하면 해킹을 당했을 때 다른 곳에서도 거의
  공통으로 쓰일 비밀번호가 누출되게 된다.
- 따라서 비밀번호와 같은 정보를 데이터베이스에 저장할 때는 저장하기 전에 먼저 해시를 한다.
- 해시된 비밀번호를 토대로 원래 비밀번호를 도출할 수는 없으며, 로그인 시에는 사용자가 입력한 데이터를 해시한 것과
  데이터베이스에 저장된 해시된 데이터를 비교, 검증하여 로그인을 시킨다.

방법
- 해시는 타사패키지를 사용한다.
1) npm install bcryptjs
2) const bcryptjs = require('bcryptjs')
3) const hashedPassword = await bcryptjs.hash(입력받은 비밀번호 데이터, 해시강도);
   // 해시 강도는 12정도면 충분한 수준임. 12로 하면 됨.
4) await db.getDb().collection('데이터베이스이름').inserOne(비밀번호를 포함한 데이터);

2. 검증

기본 개념
- 사용자가 1)'아이디를 생성'하고 2)'로그인을 하는 것'은 검증의 중요한 3단계중 2단계임
- 마지막 단계로 유저 검증을 해야하는데 이 과정은 유저 계정마다 키를 생성하고 이를 데이터베이스에 
  저장하고, 이 키를 유저한테 전달하여 이 키가 있으면 보안된 페이지에 접속할 수 있도록 하는 방식으로
  진행됨.(이 키는 세션이라고 하며 데이터베이스에 저장됨.)
- 세션은 데이터베이스에서 저장되어 있다가 사용자가 검증되면 사용자 브러우저의 쿠키라는 저장소로 전달됨.
- 세션은 사용자마다의 ID 와 사용자마다의 개인 데이터를 가지고 있음(ex) 장바구니

세션을 다룰 때는 'express-session' 패키지를 사용하고 쿠키를 다룰때는'cookie-parser'패키지를 쓰나,
'express-session' 패키지가 세션쿠키까지는 다룰 수 있어서 따로 'cookie-parser'는 안씀

Authentication vs Authorization
로그인을 한 사용자는 Authentication이 된 사용자.
모든 권한이 부여된 사용자(즉, 관리자)는 Authorization된 사용자임.


